// Mocks generated by Mockito 5.3.2 from annotations
// in demo_unit_test/test/domain/repositories/product_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:demo_unit_test/data/data_source/concrete/product_cloud_datasource_impl.dart'
    as _i2;
import 'package:demo_unit_test/data/models/product_entity.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ProductCloudDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductCloudDataSourceImpl extends _i1.Mock
    implements _i2.ProductCloudDataSourceImpl {
  @override
  List<_i3.ProductEntity> get products => (super.noSuchMethod(
        Invocation.getter(#products),
        returnValue: <_i3.ProductEntity>[],
        returnValueForMissingStub: <_i3.ProductEntity>[],
      ) as List<_i3.ProductEntity>);
  @override
  _i4.Future<List<_i3.ProductEntity>> getProducts() => (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [],
        ),
        returnValue:
            _i4.Future<List<_i3.ProductEntity>>.value(<_i3.ProductEntity>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i3.ProductEntity>>.value(<_i3.ProductEntity>[]),
      ) as _i4.Future<List<_i3.ProductEntity>>);
  @override
  _i4.Future<_i3.ProductEntity?> findProductByName(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #findProductByName,
          [name],
        ),
        returnValue: _i4.Future<_i3.ProductEntity?>.value(),
        returnValueForMissingStub: _i4.Future<_i3.ProductEntity?>.value(),
      ) as _i4.Future<_i3.ProductEntity?>);
}
